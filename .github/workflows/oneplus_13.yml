name: oneplus_13 # 工作流名称，通常与设备型号相关
on:
  workflow_dispatch: # 手动触发工作流，可以通过 GitHub UI 界面运行
    inputs: # 允许用户在手动触发时输入参数
      keep_original_settings: # 新增的输入项，控制是否保持原设置
        description: "保持原内核名称及构建时间（勾选后，下方选项无效）"
        required: false
        default: true # 默认勾选，即默认保持原设置
        type: boolean
      KERNEL_SUFFIX: # 内核名称的后缀
        description: '自定义内核名称（示例：-91vip，仅在取消勾选"保持原设置"时有效）' # 更新描述
        required: false # 设置为非必需，允许用户留空
        default: '' # 默认值为空字符串
      KERNEL_TIME: # 内核构建日期
        description: "自定义内核构建日期（示例：Mon Jan 01 00:00:00 UTC 2025，仅在取消勾选'保持原设置'时有效）" # 更新描述
        required: false # 非必需，因为可以由 keep_original_settings 控制
        default: 'Tue Dec 17 23:36:49 UTC 2024' # 默认值不变，但仅在 keep_original_settings 为 false 时才可能生效
      enable_feature_x: # 是否启用 kpm
        description: "是否启用kpm" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_feature_y: # 是否启用lz4kd
        description: "是否启用lz4kd" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_feature_z: # 是否添加风驰驱动
        description: "是否添加风驰驱动" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_bbr: # BBR控制开关
        description: "是否启用BBR拥塞控制算法"
        required: false
        default: false
        type: boolean
      enable_susfs: # 新增：是否启用SukiSU FS (SUSFS)
        description: "是否启用SukiSU FS (SUSFS)"
        required: false
        default: true # 默认启用
        type: boolean

jobs: # 定义一个或多个作业
  build: # 作业名称：构建
    runs-on: ubuntu-latest # 指定作业运行的操作系统环境
    env: # 定义环境变量
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 10G
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Futaba"
          git config --global user.email "3199167602@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache libelf-dev

      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('kernel_workspace/kernel_platform/common/build.config.gki') }}-${{ hashFiles('kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/HanKuCha/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m JiuGeFaCai_oneplus_13_v.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Set up SukiSU and KernelSU Version
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          
          # 获取最新 KernelSU 版本号
          git clone https://github.com/tiann/KernelSU.git --depth=1 /tmp/KernelSU
          KSU_COMMIT_COUNT=$(git -C /tmp/KernelSU rev-list --count main)
          KSU_VERSION=$((10200 + KSU_COMMIT_COUNT))
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "成功获取最新 KernelSU 版本号: $KSU_VERSION"
          
          cd KernelSU
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS (配置 SUSFS)
        if: ${{ inputs.enable_susfs }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          cd ./common
          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
          sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "已启用 SukiSU FS (SUSFS) 补丁。"
        
      - name: Apply HMBird GKI patch
        run: |
          cd kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>

          static int __init hmbird_patch_init(void)
          {
              /* 原有代码保持不变 */
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          cd ../../../
          git add -A
          git commit -m "Add HMBird GKI patch" || true

      - name: Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      # --- 关键修复：添加 KernelSU 所需的 KPROBES 配置 ---
      - name: Add Configuration Settings (设置编译配置)
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          
          # 修复 su_kps 错误所需的 KPROBES 配置
          echo "CONFIG_KPROBES=y" >> $CONFIG_FILE
          echo "CONFIG_HAVE_KPROBES=y" >> $CONFIG_FILE
          echo "CONFIG_KPROBES_ON_FTRACE=y" >> $CONFIG_FILE
          echo "已启用 KPROBES 支持 (KernelSU 依赖项)"
          
          # KernelSU 基础配置
          echo "CONFIG_KSU=y" >> $CONFIG_FILE
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> $CONFIG_FILE
          
          # SukiSU 特有配置
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> $CONFIG_FILE
          echo "已默认启用 SuS SU 模式。"

          # KPM 配置
          if [[ "${{ inputs.enable_feature_x }}" == "true" ]]; then
            echo "CONFIG_KPM=y" >> $CONFIG_FILE
            echo "已启用 KPM 配置。"
          else
            echo "未启用 KPM 配置。"
          fi
          
          # LZ4 压缩算法支持
          echo "CONFIG_CRYPTO_LZ4HC=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_LZ4K=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_LZ4KD=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_842=y" >> $CONFIG_FILE
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $CONFIG_FILE

          # BBR 拥塞控制算法
          if [[ "${{ inputs.enable_bbr }}" == "true" ]]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_BBR=y" >> $CONFIG_FILE
            echo "CONFIG_NET_SCH_FQ=y" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_BIC=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_CUBIC=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_HTCP=n" >> $CONFIG_FILE
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> $CONFIG_FILE
            echo "已启用 BBR 拥塞控制算法。"
          else
            echo "未启用 BBR 拥塞控制算法。"
          fi

          # SUSFS 配置
          if [[ "${{ inputs.enable_susfs }}" == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $CONFIG_FILE
            echo "已启用 SukiSU FS (SUSFS) 配置。"
          else
            echo "未启用 SukiSU FS (SUSFS) 配置。"
          fi

          # 移除 check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: Set Kernel Name
        run: |
          cd kernel_workspace/kernel_platform
          DEFAULT_SUFFIX="-android15-8-g013ec21bba94-abogki383916444-4k"

          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ]; then
            if [ -n "${{ github.event.inputs.KERNEL_SUFFIX }}" ]; then
              NEW_SUFFIX="${{ github.event.inputs.KERNEL_SUFFIX }}"
            else
              NEW_SUFFIX="$DEFAULT_SUFFIX"
            fi
            ESCAPED_SUFFIX=$(printf '%s\n' "$NEW_SUFFIX" | sed 's:[\/&]:\\&:g')
            sudo sed -i "s/-4k/${ESCAPED_SUFFIX}/g" ./common/arch/arm64/configs/gki_defconfig
            sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          else
            sed -i '/CONFIG_LOCALVERSION=/d' ./common/arch/arm64/configs/gki_defconfig
            echo "已勾选 '保持原设置'，将使用官方默认内核名。"
          fi

      - name: Add sched_ext
        if: ${{inputs.enable_feature_z }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git

      - name: Build Kernel
        run: |
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.KERNEL_TIME }}" ]; then
            export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}"
          else
            export KBUILD_BUILD_TIMESTAMP="Tue Dec 17 23:36:49 UTC 2024"
          fi
          
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image all
          
          echo "--- ccache statistics ---"
          ccache -s
          echo "-------------------------"

      - name: Apply Linux Patch
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Make AnyKernel3 (NoKPM)
        if: ${{ !inputs.enable_feature_x }}
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1 AnyKernel3_NoKPM
          rm -rf ./AnyKernel3_NoKPM/.git
          rm -rf ./AnyKernel3_NoKPM/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/

      - name: Upload AnyKernel3 (上传NoKPM_AK3包)
        if: ${{ !inputs.enable_feature_x }}
        uses: actions/upload-artifact@v4
        with:
          name: AK3_NoKPM_${{ env.KSUVER }}_oneplus_13_SuKiSU
          path: ./AnyKernel3_NoKPM/*

      - name: Apply KPM Patch (应用KPM修补补丁)
        if: ${{ inputs.enable_feature_x }}
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Make AnyKernel3 (KPM)
        if: ${{ inputs.enable_feature_x }}
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: Upload AnyKernel3 (上传 KPM_AK3包)
        if: ${{ inputs.enable_feature_x }}
        uses: actions/upload-artifact@v4
        with:
          name: AK3_KPM_${{ env.KSUVER }}_oneplus_13_SuKiSU
          path: ./AnyKernel3/*
