name: oneplus_13 # 工作流名称，通常与设备型号相关
on:
  workflow_dispatch: # 手动触发工作流，可以通过 GitHub UI 界面运行
    inputs: # 允许用户在手动触发时输入参数
      keep_original_settings: # 新增的输入项，控制是否保持原设置
        description: "保持原内核名称及构建时间（勾选后，下方选项无效）"
        required: false
        default: true # 默认勾选，即默认保持原设置
        type: boolean
      KERNEL_SUFFIX: # 内核名称的后缀
        description: '自定义内核名称（示例：-91vip，仅在取消勾选"保持原设置"时有效）' # 更新描述
        required: false # 设置为非必需，允许用户留空
        default: '' # 默认值为空字符串
      KERNEL_TIME: # 内核构建日期
        description: "自定义内核构建日期（示例：Mon Jan 01 00:00:00 UTC 2025，仅在取消勾选'保持原设置'时有效）" # 更新描述
        required: false # 非必需，因为可以由 keep_original_settings 控制
        default: 'Tue Dec 17 23:36:49 UTC 2024' # 默认值不变，但仅在 keep_original_settings 为 false 时才可能生效
      enable_feature_x: # 是否启用 kpm
        description: "是否启用kpm" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_feature_y: # 是否启用lz4kd
        description: "是否启用lz4kd" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_feature_z: # 是否添加风驰驱动
        description: "是否添加风驰驱动" # 输入框描述
        required: false # 非必需
        default: false # 默认值为 false
        type: boolean # 类型为布尔值
      enable_bbr: # BBR控制开关
        description: "是否启用BBR拥塞控制算法"
        required: false
        default: false
        type: boolean
      enable_susfs: # 新增：是否启用SukiSU FS (SUSFS)
        description: "是否启用SukiSU FS (SUSFS)"
        required: false
        default: true # 默认启用，您可以根据需要修改
        type: boolean

jobs: # 定义一个或多个作业
  build: # 作业名称：构建
    runs-on: ubuntu-latest # 指定作业运行的操作系统环境，这里使用最新的 Ubuntu
    env: # 定义环境变量，可在作业中的所有步骤中使用
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion" # ccache 编译器检查配置
      CCACHE_NOHASHDIR: "true" # ccache 不对目录进行哈希处理
      CCACHE_HARDLINK: "true" # ccache 使用硬链接
      CCACHE_DIR: /home/runner/.ccache # ccache 缓存目录
      CCACHE_MAXSIZE: 10G # ccache 最大缓存大小，从 8G 提高到 10G
    steps: # 作业中的一系列步骤
      - name: Maximize build space # 步骤名称：最大化构建空间
        uses: easimon/maximize-build-space@master # 使用第三方 Action 来清理并增加构建空间
        with:
          root-reserve-mb: 8192 # 根目录保留的兆字节
          temp-reserve-mb: 2048 # 临时目录保留的兆字节
          remove-dotnet: 'true' # 移除 .NET
          remove-android: 'true' # 移除 Android SDK
          remove-haskell: 'true' # 移除 Haskell
          remove-codeql: 'true' # 移除 CodeQL

      - name: Configure Git # 步骤名称：配置 Git
        run: | # 运行多行 shell 命令
          git config --global user.name "Futaba" # 设置全局 Git 用户名
          git config --global user.email "3199167602@qq.com" # 设置全局 Git 用户邮箱

      - name: Install dependencies # 步骤名称：安装依赖
        run: |
          sudo apt update && sudo apt upgrade -y # 更新并升级 apt 包列表
          # 合并安装命令，避免重复
          sudo apt install -y python3 git curl ccache libelf-dev

      - name: Restore ccache # 步骤名称：恢复 ccache 缓存
        uses: actions/cache@v3 # 使用 GitHub Actions 缓存 Action
        with:
          path: /home/runner/.ccache # ccache 缓存路径
          # 优化缓存键，使其更稳定，增加命中率
          key: ccache-${{ runner.os }}-${{ hashFiles('kernel_workspace/kernel_platform/common/build.config.gki') }}-${{ hashFiles('kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig') }}
          restore-keys: | # 恢复缓存的备用键
            ccache-${{ runner.os }}-

      - name: Install repo tool # 步骤名称：安装 repo 工具
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync # 步骤名称：初始化 repo 并同步代码
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/HanKuCha/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m JiuGeFaCai_oneplus_13_v.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Set up SukiSU # 步骤名称：设置 SukiSU (KernelSU 的基础部分，通常不需要开关)
        run: |
          cd kernel_workspace/kernel_platform # 进入内核平台目录
          # 使用 `Build_oneplus_sm8750` 中的 SukiSU Ultra setup 方式
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          
          cd KernelSU # 进入 KernelSU 目录
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606) # 计算 KSU 版本号
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV # 将 KSU 版本号写入 GitHub 环境变量
          export KSU_VERSION=$KSU_VERSION # 导出 KSU 版本号
          
          # 根据 Build_oneplus_sm8750，这里会执行 setup.bin 来修改 Makefile
          # 如果您的仓库中没有 setup.bin，或者其作用不影响 SUSFS 的独立开关，
          # 且您不想为此单独添加 setup.bin 文件，则保留下面的 sed 命令。
          # 如果需要 setup.bin，请确保将其放置在 `.github/workflows/` 目录下。
          echo "setup.bin 未找到或不需要，使用 sed 命令修改 Makefile。"
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile # 修改 KernelSU Makefile 中的版本号

      - name: Set up SUSFS (配置 SUSFS) # 步骤名称：设置 susfs，根据 enable_susfs 开关控制
        if: ${{ inputs.enable_susfs }} # <-- SUSFS 开关
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

           cd kernel_platform        
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
           #lz4k
           cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
           cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
           cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
           cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
           # Apply patches
           cd ./common

           # 保持 original oneplus_13 的逻辑，如果需要特定机型判断，可以自行添加
           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch

           patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
           cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
           patch -p1 -F 3 < syscall_hooks.patch
           echo "已启用 SukiSU FS (SUSFS) 补丁。"
        
      - name: Apply HMBird GKI patch # 步骤名称：写入单Boot开机补丁
        run: |
         cd kernel_workspace/kernel_platform/common/drivers
         cat << 'EOF' > hmbird_patch.c
         #include <linux/init.h>
         #include <linux/module.h>
         #include <linux/of.h>
         #include <linux/slab.h>
         #include <linux/string.h>

         static int __init hmbird_patch_init(void)
         {
             struct device_node *ver_np;
             const char *type;
             int ret;

             ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
             if (!ver_np) {
                  pr_info("hmbird_patch: version_type node not found\n");
                  return 0;
             }

             ret = of_property_read_string(ver_np, "type", &type);
             if (ret) {
                  pr_info("hmbird_patch: type property not found\n");
                  of_node_put(ver_np);
                  return 0;
             }

             if (strcmp(type, "HMBIRD_OGKI")) {
                  of_node_put(ver_np);
                  return 0;
             }

             struct property *prop = of_find_property(ver_np, "type", NULL);
             if (prop) {
                  struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                  if (!new_prop) {
                       pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                       of_node_put(ver_np);
                       return 0;
             }
             memcpy(new_prop, prop, sizeof(*prop));
             new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
             if (!new_prop->value) {
                  pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                  kfree(new_prop);
                  of_node_put(ver_np);
                  return 0;
            }
            strcpy(new_prop->value, "HMBIRD_GKI");
            new_prop->length = strlen("HMBIRD_GKI") + 1;

            if (of_remove_property(ver_np, prop) != 0) {
                 pr_info("hmbird_patch: of_remove_property failed\n");
                 return 0;
            }
            if (of_add_property(ver_np, new_prop) !=0) {
                 pr_info("hmbird_patch: of_add_property failed\n");
                 return 0;
            }
            pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
         }
         else {
             pr_info("hmbird_patch: type property structure not found\n");
         }
         of_node_put(ver_np);
         return 0;
         }
         early_initcall(hmbird_patch_init);
         MODULE_LICENSE("GPL");
         MODULE_AUTHOR("reigadegr");
         MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
         EOF
         if ! grep -q "hmbird_patch.o" Makefile; then
         echo "obj-y += hmbird_patch.o" >> Makefile
         fi
         cd ../../../
         git add -A
         git commit -m "Add HMBird GKI patch" || true

      - name: Apply lz4kd Patches # 步骤名称：应用 LZ4KD 补丁
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true

      - name: Add Configuration Settings (设置编译配置) # 修改了步骤名称，使其更通用
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add KPM Configuration Settings
          if ${{ inputs.enable_feature_x }}; then # 正确的 Shell 脚本 if 语法
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "已启用 KPM 配置。"
          else
            echo "未启用 KPM 配置。"
          fi
          
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./common/arch/arm64/configs/gki_defconfig

          # Add BBR
          if ${{ inputs.enable_bbr }}; then # 正确的 Shell 脚本 if 语法
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            echo "已启用 BBR 拥塞控制算法。"
          else
            echo "未启用 BBR 拥塞控制算法。"
          fi

          # Add SUSFS configuration settings (仅在启用 SUSFS 时添加)
          if ${{ inputs.enable_susfs }}; then # 正确的 Shell 脚本 if 语法
            echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "已启用 SukiSU FS (SUSFS) 配置。"
          else
            echo "未启用 SukiSU FS (SUSFS) 配置。"
          fi

          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: Set Kernel Name # 步骤名称：设置内核名称
        run: |
          cd kernel_workspace/kernel_platform
          # 针对 oneplus_13 的默认后缀（您可以根据实际情况调整或从其他地方获取）
          DEFAULT_SUFFIX="-android15-8-g013ec21bba94-abogki383916444-4k"

          echo "保持原设置: ${{ github.event.inputs.keep_original_settings }}"
          echo "自定义后缀: ${{ github.event.inputs.KERNEL_SUFFIX }}"
          echo "默认后缀: $DEFAULT_SUFFIX"

          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ]; then # 如果没有勾选“保持原设置”
            if [ -n "${{ github.event.inputs.KERNEL_SUFFIX }}" ]; then # 如果自定义后缀不为空
              NEW_SUFFIX="${{ github.event.inputs.KERNEL_SUFFIX }}"
              echo "使用自定义内核名称: $NEW_SUFFIX"
            else
              NEW_SUFFIX="$DEFAULT_SUFFIX" # 如果自定义后缀为空，则回退到原始默认后缀
              echo "自定义内核名称留空，将使用机型默认后缀: $NEW_SUFFIX"
            fi
            # 当不保持原始设置时，我们希望修改 -4k 部分
            ESCAPED_SUFFIX=$(printf '%s\n' "$NEW_SUFFIX" | sed 's:[\/&]:\\&:g')
            sudo sed -i "s/-4k/${ESCAPED_SUFFIX}/g" ./common/arch/arm64/configs/gki_defconfig
            # 这一行应该只在需要自定义后缀时才移除 scm_version，否则会影响默认名
            sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          else # 如果勾选了“保持原设置”
            # 删除 CONFIG_LOCALVERSION，但保留 CONFIG_LOCALVERSION_AUTO=n，以确保内核名由 SCM_VERSION 决定
            sed -i '/CONFIG_LOCALVERSION=/d' ./common/arch/arm64/configs/gki_defconfig
            # 由于 CONFIG_LOCALVERSION_AUTO 已经在 Add Configuration Settings 步骤中设置为 n
            # 这里不需要重复设置或删除，确保其行为是正确的。
            # 如果期望通过 SCM_VERSION 生成动态内核名，则不能删除 SCM_VERSION。
            echo "已勾选 '保持原设置'，将使用官方默认内核名 (包含 SCM 版本信息)。"
            # 此时不需要对 -4k 进行替换，因为内核名将由编译系统自动生成，包含 Git ID
          fi


      - name: Add sched_ext # 步骤名称：添加 sched_ext (风驰驱动)
        if: ${{inputs.enable_feature_z }} # 只有当 enable_feature_z 为 true 时才执行
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched

      - name: Build Kernel # 步骤名称：构建内核
        run: |
          # 只有在未勾选“保持原设置”时才应用自定义构建时间
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.KERNEL_TIME }}" ]; then
            export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.KERNEL_TIME }}" # 设置内核构建时间戳
            echo "使用自定义内核构建日期: ${{ github.event.inputs.KERNEL_TIME }}"
          else
            # 如果勾选了“保持原设置”或者自定义时间为空，则使用您原 Oneplus 13 工作流中的默认时间
            export KBUILD_BUILD_TIMESTAMP="Tue Dec 17 23:36:49 UTC 2024" # 这里写死为原默认时间
            echo "已勾选 '保持原设置' 或自定义时间为空，将使用默认内核构建日期: Tue Dec 17 23:36:49 UTC 2024。"
          fi
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH" # 添加 Clang 编译器路径到 PATH
          export PATH="/usr/lib/ccache:$PATH" # 添加 ccache 路径到 PATH
          # libelf-dev 已在 Install dependencies 步骤中安装，此处移除冗余
          cd kernel_workspace/kernel_platform/common # 进入 common 目录
          # 执行内核编译命令 (gki_defconfig 和 Image 分两步编译更健壮)
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 gki_defconfig all # 先配置defconfig
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out KCFLAGS+=-O2 Image # 后编译Image

      - name: Apply Linux Patch # 步骤名称：应用 Linux 补丁
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot # 进入输出目录
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux # 下载 patch_linux 工具
         chmod +x patch_linux # 添加执行权限
         ./patch_linux # 执行补丁工具
         rm -f Image # 移除原始 Image 文件
         mv oImage Image # 将 oImage 重命名为 Image

      - name: Make AnyKernel3 (NoKPM) # 步骤名称：生成无 KPM 的 AnyKernel3 刷机包
        if: ${{ !inputs.enable_feature_x }} # 修改条件：仅在未启用 KPM 时执行
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1 AnyKernel3_NoKPM
          rm -rf ./AnyKernel3_NoKPM/.git
          rm -rf ./AnyKernel3_NoKPM/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/

      - name: Upload AnyKernel3 (上传NoKPM_AK3包)
        if: ${{ !inputs.enable_feature_x }} # 修改条件：仅在未启用 KPM 时执行
        uses: actions/upload-artifact@v4
        with:
          name: AK3_NoKPM_${{ env.KSUVER }}_oneplus_13_SuKiSU # 修改名称以反映机型和SuKiSU
          path: ./AnyKernel3_NoKPM/*

      - name: Apply KPM Patch (应用KPM修补补丁) # 确保这一步在生成 KPM 版本的 AnyKernel3 之前
        if: ${{ inputs.enable_feature_x }} # 添加条件：仅在启用 KPM 时执行
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image

      - name: Make AnyKernel3 (KPM) # 步骤名称：生成有 KPM 的 AnyKernel3 刷机包
        if: ${{ inputs.enable_feature_x }} # 添加条件：仅在启用 KPM 时执行
        run: |
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: Upload AnyKernel3 (上传 KPM_AK3包)
        if: ${{ inputs.enable_feature_x }} # 添加条件：仅在启用 KPM 时执行
        uses: actions/upload-artifact@v4
        with:
         name: AK3_KPM_${{ env.KSUVER }}_oneplus_13_SuKiSU # 修改名称以反映机型和SuKiSU
         path: ./AnyKernel3/*
