name: oneplus_13
on:
  workflow_dispatch:
    inputs:
      keep_original_settings:
        description: "保持原内核名称及构建时间（勾选后，下方选项无效）"
        required: false
        default: true
        type: boolean
      KERNEL_SUFFIX:
        description: '自定义内核名称（示例：-91vip，仅在取消勾选"保持原设置"时有效）'
        required: false
        default: ''
      KERNEL_TIME:
        description: "自定义内核构建日期（示例：Mon Jan 01 00:00:00 UTC 2025，仅在取消勾选'保持原设置'时有效）"
        required: false
        default: 'Tue Dec 17 23:36:49 UTC 2024'
      enable_feature_x:
        description: "是否启用kpm"
        required: false
        default: false
        type: boolean
      enable_feature_y:
        description: "是否启用lz4kd"
        required: false
        default: false
        type: boolean
      enable_feature_z:
        description: "是否添加风驰驱动"
        required: false
        default: false
        type: boolean
      enable_bbr:
        description: "是否启用BBR拥塞控制算法"
        required: false
        default: false
        type: boolean
      enable_susfs:
        description: "是否启用SukiSU FS (SUSFS)"
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 10G
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Futaba"
          git config --global user.email "3199167602@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl ccache libelf-dev

      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('kernel_workspace/kernel_platform/common/build.config.gki') }}-${{ hashFiles('kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/HanKuCha/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m JiuGeFaCai_oneplus_13_v.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Set up SukiSU and KernelSU Version
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          
          # --- 核心修复：确保使用兼容的KernelSU代码 ---
          git clone -b ksu-main https://github.com/SukiSU-Ultra/KernelSU.git kernelsu_tmp
          cp -f kernelsu_tmp/kernel/Makefile KernelSU/kernel/
          cp -f kernelsu_tmp/kernel/sucompat.c KernelSU/kernel/
          rm -rf kernelsu_tmp
          
          # 获取最新 KernelSU 版本号
          git clone https://github.com/tiann/KernelSU.git --depth=1 /tmp/KernelSU
          KSU_COMMIT_COUNT=$(git -C /tmp/KernelSU rev-list --count main)
          KSU_VERSION=$((10200 + KSU_COMMIT_COUNT))
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "成功获取最新 KernelSU 版本号: $KSU_VERSION"
          
          cd KernelSU
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Set up SUSFS (配置 SUSFS)
        if: ${{ inputs.enable_susfs }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          cd ./common
          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
          sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "已启用 SukiSU FS (SUSFS) 补丁。"
        
      - name: Apply HMBird GKI patch
        run: |
          cd kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>

          static int __init hmbird_patch_init(void)
          {
              /* 代码保持不变 */
          }
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          cd ../../../
          git add -A
          git commit -m "Add HMBird GKI patch" || true

      - name: Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      - name: Add Configuration Settings (设置编译配置)
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          
          # --- 核心修复：确保启用所有必需的KPROBE选项 ---
          echo "CONFIG_KPROBES=y" >> $CONFIG_FILE
          echo "CONFIG_HAVE_KPROBES=y" >> $CONFIG_FILE
          echo "CONFIG_KPROBES_ON_FTRACE=y" >> $CONFIG_FILE
          echo "CONFIG_MODULES=y" >> $CONFIG_FILE
          echo "CONFIG_MODULE_UNLOAD=y" >> $CONFIG_FILE
          echo "CONFIG_ARM64_MODULE_PLTS=y" >> $CONFIG_FILE
          echo "已启用完整KPROBES支持 (KernelSU必备)"
          
          echo "CONFIG_KSU=y" >> $CONFIG_FILE
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> $CONFIG_FILE
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> $CONFIG_FILE
          
          if [[ "${{ inputs.enable_feature_x }}" == "true" ]]; then
            echo "CONFIG_KPM=y" >> $CONFIG_FILE
          fi
          
          echo "CONFIG_CRYPTO_LZ4HC=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_LZ4K=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_LZ4KD=y" >> $CONFIG_FILE
          echo "CONFIG_CRYPTO_842=y" >> $CONFIG_FILE
          echo "CONFIG_LOCALVERSION_AUTO=n" >> $CONFIG_FILE

          if [[ "${{ inputs.enable_bbr }}" == "true" ]]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_BBR=y" >> $CONFIG_FILE
            echo "CONFIG_NET_SCH_FQ=y" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_BIC=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_CUBIC=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> $CONFIG_FILE
            echo "CONFIG_TCP_CONG_HTCP=n" >> $CONFIG_FILE
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> $CONFIG_FILE
          fi

          if [[ "${{ inputs.enable_susfs }}" == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $CONFIG_FILE
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $CONFIG_FILE
          fi

          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      # 后续步骤保持不变 ...
